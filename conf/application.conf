# https://www.playframework.com/documentation/latest/Configuration
http.port = 8080
http.port = ${?PLAY_PORT}
play.http.secret.key = "k:ax73XurOTlYSWyEkrLPx=P9HcpKLWprmBQi_]efV68ASNdiXd7a3lj?>M747f:"
play.http.secret.key = ${?PLAY_SECRET}

slick.dbs {
  default {
    profile = "clickhouse.ClickHouseProfile$"
    db {
      driver = "com.clickhouse.jdbc.ClickHouseDriver"
      url = "jdbc:clickhouse://127.0.0.1:8123"
      url = ${?SLICK_CLICKHOUSE_URL}
      numThreads = 4
      queueSize = 128
    }
  }
}

ot {
  clickhouse {
    literature {
      label = "Literature ocurrences table"
      name = "ot.literature"
    }
    literatureIndex {
      label = "Literature index ocurrences table"
      name = "ot.literature_index"
    }
    similarities {
      label = "Similarity table for the Word2Vec model"
      name = "ot.ml_w2v"
    }
    sentences {
      label = "Literature sentence matches for entities in publication"
      name = "ot.sentences"
    }
    target {
      associations {
        label = "Association table for targets"
        name = "ot.associations_otf_target"
      }
    }

    disease {
      associations {
        label = "Association table for targets"
        name = "ot.associations_otf_disease"
      }
    }

    harmonic {
      pExponent = 2
      datasources = [
        {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true, required = false},
        {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false, required = false},
        {id: "impc", weight: 0.2, data-type = "animal_model", propagate = true, required = false},
        {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true, required = false},
        {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true, required = false},
        {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true, required = false},
        {id: "cancer_biomarkers", weight: 0.5, data-type = "affected_pathway", propagate = true, required = false},
        {id: "ot_crispr", weight: 0.5, data-type = "ot_partner", propagate = true, required = false},
        {id: "encore", weight: 0.5, data-type = "ot_partner", propagate = true, required = false},
      ]
    }
  }
  elasticsearch {
    host = "localhost"
    port = 9200
    host = ${?ELASTICSEARCH_HOST}
    port = ${?ELASTICSEARCH_PORT}
    // name is the api reference, index in the index name in ES
    entities = [
      {
        name = "go"
        index = "go"
      },
      {
        name = "literature"
        index = "literature"
      },
      {
        name = "interaction_evidence"
        index = "interaction_evidence"
      },
      {
        name = "interaction"
        index = "interaction"
      },
      {
        name = "known_drugs"
        index = "known_drugs"
      },
      {
        name = "otar_projects"
        index = "otar_projects"
      },
      {
        name = "pharmacogenomics"
        index = "pharmacogenomics"
      },
      {
        name = "faers"
        index = "openfda_faers"
      },
      {
        name = "mp"
        index = "mouse_phenotypes"
      },
      {
        name = "so"
        index = "so"
      },
      {
        name = "eco"
        index = "eco"
      },
      {
        name = "evidences"
        index = "evidence_"
      },
      {
        name = "expression"
        index = "expression"
      },
      {
        name = "reactome"
        index = "reactome"
      },
      {
        name = "proteinCodingCoordinates"
        index = "protein_coding_coords"
      },
      {
        name = "cancerBiomarker"
        index = "cancerbiomarker"
      },
      {
        name = "credible_set"
        index = "credible_set"
      },
      {
        name = "target"
        index = "target"
        searchIndex = "search_target"
        facetSearchIndex = "facet_search_target"
      },
      {
        name = "disease"
        index = "disease"
        searchIndex = "search_disease"
        facetSearchIndex = "facet_search_disease"
      },
      {
        name = "variant"
        index = "variant_index"
        searchIndex = "search_variant"
      },
      {
        name = "disease_hpo"
        index = "disease_hpo"
      },
      {
        name = "hpo"
        index = "hpo"
      },
      {
        name = "drug"
        index = "drug"
        searchIndex = "search_drug"
      },
      {
        name = "drugMoA"
        index = "mechanism_of_action"
      },
      {
        name = "drugIndications"
        index = "indication"
      },
      {
        name = "drugWarnings"
        index = "drug_warnings"
      },
      {
        name = "study"
        index = "gwas_index"
        searchIndex = "search_study"
      },
      {
        name = "downloads"
        index = "downloads"
      }
    ]
    highlightFields = [
      "id",
      "keywords",
      "name",
      "description",
      "prefixes",
      "terms",
      "terms5",
      "terms25",
      "ngrams"
    ]
  }

  meta {
    name = "Open Targets GraphQL & REST API Beta"
    apiVersion {
      x = "24"
      x = ${?META_APIVERSION_MAJOR}
      y = "02"
      y = ${?META_APIVERSION_MINOR}
      z = "0"
      z = ${?META_APIVERSION_PATCH}
    }
    dataVersion {
      year = "23"
      year = ${?META_DATA_YEAR}
      month = "06"
      month = ${?META_DATA_MONTH}
      iteration = "0"
      iteration = ${?META_DATA_ITERATION}
    }
  }
  apiKeyHash = "-1467626332"
  logging {
    // header defined here because it's also used on the FE. If the FE changes their value we can update it here without
    // having to recompile code.
    otHeader = "OT-Platform"
    // GQL servers regularly ping the server to get schema information, we don't care about this.
    ignoredQueries = ["IntrospectionQuery"]
  }
    ignoreCache = "false"
    ignoreCache = ${?PLATFORM_API_IGNORE_CACHE}
    qValidationLimitNTerms = "2000"
}

ot.qValidationLimitNTerms=${?PLATFORM_API_MAX_QUERY_TERMS}

play {
  cache {
    caffeine {
      defaults = {
        initial-capacity = 1000
        maximum-size = 100000
      }
    }
  }
  server {
    pekko {
      max-header-size = 16k
    }
  }
  filters {
    cors {
      serveForbiddenOrigins = true
    }
    # GZip filter configuration
    gzip {

      # The buffer size to use for gzipped bytes
      bufferSize = 8k

      # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
      # to chunked encoding.
      chunkedThreshold = 100k

      contentType {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = []

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
      }
    }
    disabled = [
      play.filters.hosts.AllowedHostsFilter,
      play.filters.csp.CSPFilter,
      play.filters.csrf.CSRFFilter,
      play.filters.headers.SecurityHeadersFilter]
    enabled = [play.filters.cors.CORSFilter]
  }


}

pekko.http {
  parsing {
    max-uri-length = 16k
  }
}
